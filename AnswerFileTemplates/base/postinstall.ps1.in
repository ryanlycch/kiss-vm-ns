
# Setup a plain windows server

# no use, just ingnore these options
param (
	[switch]$cifs = $true,
	[switch]$nfs = $true,
	[switch]$kdc = $false
)

$utf8NoBOM = New-Object System.Text.UTF8Encoding $false

Function Out-Host {
	$str = $args[0]
	Write-Host "$str"
	echo "$str"
}

Function Sync-Time {
	$clockServer = $args[0]
	w32tm /config /manualpeerlist:$clockServer /syncfromflags:manual /reliable:yes /update
	net stop w32time
	net start w32time
	for ($loop=1; $loop -le 32; $loop++) {
		$tmresync = w32tm /resync
		if ($tmresync | Select-String -pattern "successfully." ) {
			Out-Host "$tmresync"; break
		} else {
			Start-Sleep 1
		}
	}
}

Function Install-NuGet {
	param([string]$curl = "https://dist.nuget.org/win-x86-commandline/v3.3.0/nuget.exe")
	$progPath='C:\Program Files'
	$target = "$progPath\nuget.exe"

	echo "[info] download $curl to $target ..."
	Invoke-WebRequest $curl -OutFile $target
	Set-Alias nuget $target -Scope Global -Verbose
}

Function virtio-win-install() {
	param([string]$AnsfDrvLetter)
	$msifile, $exefile, $drvDir = "", "", ""
	$isoPath = "$AnsfDrvLetter\virtio-win.iso"
	if (Test-Path -Path $isoPath) {
		Out-Host "`n==> mount iso file: $isoPath ..."
		$mntObj = Mount-DiskImage -ImagePath $isoPath -PassThru
		$drive = "$(($mntObj | Get-Volume).DriveLetter):"
		$msifile = "$drive\virtio-win-gt-x64.msi"
		$exefile = "$drive\virtio-win-guest-tools.exe"
		$drvDir = "$drive"
	}
	if (!$msifile) {
		for ($c=65; $c -lt 91; $c++) {
			$L=[char]$c;
			$M="${L}:\virtio-win-gt-x64.msi";
			$E="${L}:\virtio-win-guest-tools.exe";
			$D="${L}:"
			if (Test-Path -Path $M) {
				$msifile, $exefile, $drvDir = $M, $E, ${D}
				break
			}
		}
	}
	for ($loop=1; $loop -le 8; $loop++) {
		if ([Environment]::OSVersion.Version -lt (new-object 'Version' 6,2)) {
			Out-Host "`n==> win7 virtio-win driver: ${D}\w7\ ..."
			PnPutil.exe -i -a ${drvDir}\NetKVM\w7\amd64\*.inf
			PnPutil.exe -i -a ${drvDir}\amd64\w7\*.inf
		} elseif ($msifile -and (Test-Path -Path $msifile)) {
			if ($loop -lt 4) {
				Out-Host "`n==> install virtio-win driver: $msifile ..."
				powershell "msiexec.exe /i $msifile /passive /qn /norestart"
				#powershell "$exefile install /qn /passive /norestart"
			} else {
				$osname = (systeminfo.exe /fo csv | ConvertFrom-Csv | select OS*Name).'OS Name'
				$Ver = switch -wildcard ($osname) {
					"*Windows Server 2012 *" { "2k12" }
					"*Windows Server 2012 R2*" { "2k12R2" }
					"*Windows Server 2016 *" { "2k16" }
					"*Windows Server 2019 *" { "2k19" }
					"*Windows Server 2022 *" { "2k22" }
					"*Windows 10 *" { "w10" }
					"*Windows 11 *" { "w11" }
				}
				Out-Host "`n==> install virtio-win driver: ${drvDir}\NetKVM\$Ver\amd64,${drvDir}\amd64\$Ver ..."
				PnPutil.exe -i -a ${drvDir}\NetKVM\$Ver\amd64\*.inf
				PnPutil.exe -i -a ${drvDir}\amd64\$Ver\*.inf
			}
		}
		Start-Sleep -s 2
		$ifs = @(ipconfig | Select-String -Pattern "^Eth")
		if ($ifs.Count -ge 2) { break } else { Start-Sleep -s 2 }
	}
	Out-Host "`n==> virtio-win install done!"
}

Function init-extra-disks {
	if ([Environment]::OSVersion.Version -lt (new-object 'Version' 6,2)) {
		$dlist = @("list disk"|diskpart|Select-String -Pattern "Disk (\d+) .*GB *$")
		for ($i=0; $i -lt $dlist.Count; $i++) {
			$m = $dlist[$i]
			$Num = $($m.Matches).Groups[1].Value
			"Select disk $Num
				Create partition PRIMARY
				Format FS=NTFS LABEL=test$($i+1) QUICK
				Assign
				Active
				exit"|diskpart
		}
	} else {
		Get-Disk | Where partitionstyle -eq 'raw' | Out-Host
		$diskArray = @(Get-Disk | Where partitionstyle -eq 'raw')
		for ($i=1; $i -le $diskArray.Count; $i++) {
			$diskArray[$i-1] |
			Initialize-Disk -PartitionStyle MBR -PassThru |
			New-Partition -AssignDriveLetter -UseMaximumSize |
			Format-Volume -FileSystem NTFS -NewFileSystemLabel "test$i" -Confirm:$false
		}
	}
}

Function Unzip-File() {
	param([string]$ZipFile, [string]$TargetFolder)
	if (!(Test-Path $TargetFolder)) {
		mkdir $TargetFolder
	}
	$shellApp = New-Object -ComObject Shell.Application
	$files = $shellApp.NameSpace($ZipFile).Items()
	$shellApp.NameSpace($TargetFolder).CopyHere($files)
}

Function Install-sshd() {
	param([string]$Path)
	Copy-Item -Path $Path -Destination 'C:\OpenSSH.zip'
	Unzip-File -ZipFile 'C:\OpenSSH.zip' -TargetFolder 'C:\Program Files'
	powershell -ExecutionPolicy Bypass -File 'C:\Program Files\OpenSSH-Win64\install-sshd.ps1'
	New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
	$oldpath = (Get-ItemProperty -Path 'Registry::HKLM\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
	$newpath = "$oldpath;C:\Program Files\OpenSSH-Win64"
	Set-ItemProperty -Path "Registry::HKLM\System\CurrentControlSet\Control\Session Manager\Environment" -Name PATH -Value $newPath

	net start sshd
	Set-Service sshd -StartupType Automatic
	Set-Service ssh-agent -StartupType Automatic
	New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force

	#create authorized_keys file
	$sshConfDir="$HOME\.ssh"
	New-Item "$sshConfDir" -ItemType Directory -ea 0
	Get-Content -Path C:\sshkeys\id_*.pub -Raw | Set-Content "$sshConfDir\authorized_keys"
	Get-Content -Path C:\sshkeys\id_*.pub -Raw | Set-Content "C:\ProgramData\ssh\administrators_authorized_keys"
}

Function GetIPAddrFromNic() {
	param([System.Object]$Nic, [string]$Family = "IPv4")
	@(Get-NetIPAddress -AddressFamily $Family -InterfaceIndex $Nic.ifIndex)[0].IPAddress.Trim()
}

Function Generate-Env-File() {
	param([string]$envf = "C:\win.env")
	$content = "#windows env file
#VM_INT_IP=
#VM_EXT_IP=
#VM_EXT_IP6=

ADMINUSER=@ADMINUSER@
ADMINPASSWORD=@ADMINPASSWORD@
AD_DOMAIN_NETBIOS_NAME=@DOMAIN_NETBIOS_NAME@
AD_DOMAIN=@AD_DOMAIN@
AD_FQDN=@FQDN@

#WIN_CIFS_SHARE1=cifstest
#WIN_CIFS_SHARE2=cifssch
#WIN_DFS_SHARE=dfsroot
#WIN_DFS_SHARE1=dfsroot/local
#WIN_DFS_SHARE2=dfsroot/remote
#WIN_NFS_SHARE1=/nfstest
#WIN_NFS_SHARE2=/nfssch"
	Set-Content -Value $utf8NoBOM.GetBytes($content) -Encoding Byte -Path $envf
}

$mypath = $MyInvocation.Mycommand.Path
$ansfDriveLetter = "$((Get-Item $mypath).PSDrive.Name):"

Out-Host "==> Start postinstall $mypath ..."
$LogDirName = "postinstall_logs"
$LogPath = "C:\$LogDirName"
New-Item "$LogPath" -ItemType Directory -ea 0

$RunOnceKey = "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce"

$Stage = $args[0]
if (!$Stage) { $Stage = "base" }

Out-Host "==> Start postinstall $Stage ..."

switch($Stage) {
	"base" {
		# activate windows with the product key
		# no need to activate: ??? 

		# turning off firewall
		Out-Host "`n==> turning off firewall"
		if (Get-Command Set-NetFirewallProfile -errorAction SilentlyContinue) {
			Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
		} else {
			netsh advfirewall set currentprofile state off
		}

		# enabling remote desktop
		Out-Host "`n==> enabling remote desktop"
		Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
		#Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
		#Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0

		# disabling IE ESC (Internet Explorer Enhanced Security Configuration)
		Out-Host "`n==> disabling IE ESC (Internet Explorer Enhanced Security Configuration)"
		$AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
		$UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
		Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0
		Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0
		Stop-Process -Name Explorer
		Out-Host "`n==> IE Enhanced Security Configuration (ESC) has been disabled."

		# disabling shutdown event tracker/shutdown dialog
		Out-Host "`n==> disabling shutdown event tracker/dialog"
		reg add "HKLM\SOFTWARE\Policies\Control\Microsoft\Windows NT\Reliability" /v ShutDownReasonOn /t REG_DWORD /d 0 /f
		reg add "HKLM\SOFTWARE\Policies\Control\Microsoft\Windows NT\Reliability" /v ShutDownReasonUI /t REG_DWORD /d 0 /f

		# adding hostname for the virtual host
		Out-Host "`n==> add host's hostname to $Env:WinDir\system32\drivers\etc\hosts"
		echo "" >> $Env:WinDir\system32\drivers\etc\hosts
		echo "@HOST_IP@ @VIRTHOST@" >> $Env:WinDir\system32\drivers\etc\hosts

		Out-Host "`n==> disable and stop ServerManager ..."
		if (Get-Command Get-ScheduledTask -errorAction SilentlyContinue) {
			Get-ScheduledTask -TaskName ServerManager | Disable-ScheduledTask -Verbose
			Stop-Process -Name "ServerManager"
		}
		Out-Host "`n==> disable 'allow PC to be discoverable on this network'"
		reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network\NewNetworkWindowOff" /f

		# try install virtio-win driver
		Out-Host "`n==> install virtio-win driver ..."
		virtio-win-install -AnsfDrvLetter $ansfDriveLetter

		Out-Host "`n==> Start initialize extra disks ..."
		init-extra-disks

		# static ip setup
		Out-Host "`n==> static ip setup"
		$STATIC_IP_EXT = "@STATIC_IP_EXT@"
		$STATIC_IP_INT = "@STATIC_IP_INT@"
		$MAC_EXT = "@VNIC_MAC_EXT@"
		$MAC_INT = "@VNIC_MAC_INT@"

		#waiting NICs up ready
		$NicExt = Get-NetAdapter|Where-Object {$_.MacAddress -like $MAC_EXT.replace(":","?")}
		$NicInt = Get-NetAdapter|Where-Object {$_.MacAddress -like $MAC_INT.replace(":","?")}
		$NicRDMA = @(Get-NetAdapterRdma)[0]
		Out-Host "`n---> NIC ext info: ip($(GetIPAddrFromNic $NicExt)), desc: $($NicExt.ifDesc)"
		Out-Host "`n---> NIC int info: ip($(GetIPAddrFromNic $NicInt)), desc: $($NicInt.ifDesc)"
		if ($NicRDMA) {Out-Host "`n---> NIC int info: ip($(GetIPAddrFromNic $NicRDMA)), desc: $($NicRDMA.ifDesc)"}

echo "NIC-ext: $(GetIPAddrFromNic $NicExt) $(GetIPAddrFromNic $NicExt "IPv6") desc: $($NicExt.ifDesc)" | Set-Content -encoding utf8 $LogPath\@IPCONFIG_LOGF@
echo "NIC-int: $(GetIPAddrFromNic $NicInt) $(GetIPAddrFromNic $NicInt "IPv6") desc: $($NicInt.ifDesc)" | Add-Content -encoding utf8 $LogPath\@IPCONFIG_LOGF@

		if ($NicInt -and $STATIC_IP_INT) {
			$oldIntAddrs = @(Get-NetIPAddress -AddressFamily IPv4 -InterfaceIndex $NicInt.InterfaceIndex)
			$IntIpConf = (Get-NetIPConfiguration -InterfaceIndex $NicInt.ifIndex)

			Out-Host "`n---> set static IP($STATIC_IP_INT) on int NIC: $($NicInt.ifAlias)"
			New-NetIPAddress -InterfaceIndex $NicInt.InterfaceIndex -AddressFamily IPv4 `
				-IPAddress $STATIC_IP_INT -PrefixLength $oldIntAddrs[0].PrefixLength `
				-DefaultGateway $IntIpConf.IPv4DefaultGateway[0].NextHop
		}

		# change address of EXT NIC from DHCP to STATIC
		if ($NicExt) {
			if (Get-Command Get-NetIPAddress -errorAction SilentlyContinue) {
				for ($loop=1; $loop -le 8; $loop++) {
					$oldExtAddrs = @(Get-NetIPAddress -AddressFamily IPv4 -InterfaceIndex $NicExt.InterfaceIndex)
					if ($null -ne $oldExtAddrs -and $null -ne $oldExtAddrs[0].IPAddress `
						-and $oldExtAddrs[0].IPAddress -is [string] -and $oldExtAddrs[0].IPAddress.Trim() -notlike "169.254.*") {
						break
					} else {
						Start-Sleep -s 5
						Out-Host "`n---> renew IP on ext NIC: $($NicExt.ifAlias)"
						ipconfig /release $NicExt.ifAlias
						ipconfig /renew $NicExt.ifAlias
					}
				}
			}
			$extStaticIp = $oldExtAddrs[0].IPAddress.Trim()
			$extIpConf = (Get-NetIPConfiguration -InterfaceIndex $NicExt.ifIndex)
			if ($STATIC_IP_EXT) {
				$extStaticIp=$STATIC_IP_EXT
			} else {
				Remove-NetIPAddress -IPAddress $extStaticIp -Confirm:$false
			}
			Out-Host "`n---> set static IP($extStaticIp) on ext NIC: $($NicExt.ifAlias)"
			New-NetIPAddress -InterfaceIndex $NicExt.InterfaceIndex -AddressFamily IPv4 `
				-IPAddress $extStaticIp -PrefixLength $oldExtAddrs[0].PrefixLength `
				-DefaultGateway $extIpConf.IPv4DefaultGateway[0].NextHop
		}

		# disabling DNS registration on the network interface
		if ($NicInt) {
			Out-Host "`n==> disabling DNS registration on the network interface"
			$NicInt.SetDynamicDNSRegistration($false,$false)
		}

		# check if there is autorun script in anwser file
		$AutoRunFilePath = "$ansfDriveLetter\@AUTORUN_DIR@\autorun.ps1"
		if (Test-Path -Path $AutoRunFilePath) {
			Out-Host "`n==> exec autorun file"
			cd "$ansfDriveLetter\@AUTORUN_DIR@"
			powershell -ExecutionPolicy Bypass -File autorun.ps1
			# Reboot to post stage
			Out-Host "`n==> Reboot to post stage"
			Set-ItemProperty $RunOnceKey "NextRun" "powershell $mypath post >> @POST_INSTALL_LOG@ 2>&1"
			shutdown -r -f -t 10 -c "Shutting down in 1 minute: Reboot to complete custom configure after autorun"
			exit
		}
	}

	"post" {
		#do nothing
	}
}

# windows env file
Generate-Env-File

# check if there is autorun post script in anwser file
$AutoRunFilePath = "$ansfDriveLetter\@AUTORUN_DIR@\autorun-post.ps1"
if (Test-Path -Path $AutoRunFilePath) {
	Out-Host "`n==> exec autorun-post file"
	$opath = pwd
	cd "$ansfDriveLetter\@AUTORUN_DIR@"
	powershell -ExecutionPolicy Bypass -File autorun-post.ps1
	cd $opath
	Out-Host "`n==> autorun-post end"
}

# installing openssh
# see: https://github.com/PowerShell/Win32-OpenSSH/issues/139, seems doesn't work
reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "EnableLinkedConnections" /t REG_DWORD /d 0x00000001 /f
$OpenSSHPath = "$ansfDriveLetter\OpenSSH.zip"
if (Test-Path -Path $OpenSSHPath) {
	Out-Host "`n==> install and start ssh server"
	Copy-Item -Path $ansfDriveLetter\sshkeys -Recurse -Destination 'C:\'
	Install-sshd -Path $OpenSSHPath
}

# complete
Out-Host "`n==> save ipconfig info and generate install complete file !!!"
ipconfig | Add-Content -encoding utf8 $LogPath\@IPCONFIG_LOGF@
echo "install complete" | Set-Content -encoding utf8 $LogPath\@INSTALL_COMPLETE_FILE@
foreach ($dir in ("$ansfDriveLetter")) {
	if (Test-Path -Path $dir) {
		Copy-Item -Path @POST_INSTALL_LOG@ -Destination $LogPath
		Copy-Item -Path C:\win.env -Destination $LogPath
		Copy-Item -Path $LogPath -Recurse -Destination $dir\
	}
}

Out-Host "`n==> sync time"
Sync-Time @TIME_SERVER@

taskkill /F /IM explorer.exe
explorer

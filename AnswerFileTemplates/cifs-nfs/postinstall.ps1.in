
# For NFS/CIFS deployment

param (
	[switch]$cifs = $true,
	[switch]$nfs = $true,
	[switch]$kdc = $false
)

$utf8NoBOM = New-Object System.Text.UTF8Encoding $false

Function Out-Host {
	$str = $args[0]
	Write-Host "$str"
	echo "$str"
}

Function Sync-Time {
	$clockServer = $args[0]
	w32tm /config /manualpeerlist:$clockServer /syncfromflags:manual /reliable:yes /update
	net stop w32time
	net start w32time
	for ($loop=1; $loop -le 32; $loop++) {
		$tmresync = w32tm /resync
		if ($tmresync | Select-String -pattern "successfully." ) {
			Out-Host "$tmresync"; break
		} else {
			Start-Sleep 1
		}
	}
}

Function init-extra-disks {
	if ([Environment]::OSVersion.Version -lt (new-object 'Version' 6,2)) {
		$dlist = @("list disk"|diskpart|Select-String -Pattern "Disk (\d+) .*GB *$")
		for ($i=0; $i -lt $dlist.Count; $i++) {
			$m = $dlist[$i]
			$Num = $($m.Matches).Groups[1].Value
			"Select disk $Num
				Create partition PRIMARY
				Format FS=NTFS LABEL=test$($i+1) QUICK
				Assign
				Active
				exit"|diskpart
		}
	} else {
		Get-Disk | Where partitionstyle -eq 'raw' | Out-Host
		$diskArray = @(Get-Disk | Where partitionstyle -eq 'raw')
		for ($i=1; $i -le $diskArray.Count; $i++) {
			$diskArray[$i-1] |
			Initialize-Disk -PartitionStyle MBR -PassThru |
			New-Partition -AssignDriveLetter -UseMaximumSize |
			Format-Volume -FileSystem NTFS -NewFileSystemLabel "test$i" -Confirm:$false
		}
	}
}

Function Unzip-File() {
	param([string]$ZipFile, [string]$TargetFolder)
	if (!(Test-Path $TargetFolder)) {
		mkdir $TargetFolder
	}
	$shellApp = New-Object -ComObject Shell.Application
	$files = $shellApp.NameSpace($ZipFile).Items()
	$shellApp.NameSpace($TargetFolder).CopyHere($files)
}

Function Install-sshd() {
	param([string]$Path)
	Copy-Item -Path $Path -Destination 'C:\OpenSSH.zip'
	Unzip-File -ZipFile 'C:\OpenSSH.zip' -TargetFolder 'C:\Program Files'
	powershell -ExecutionPolicy Bypass -File 'C:\Program Files\OpenSSH-Win64\install-sshd.ps1'
	New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
	$oldpath = (Get-ItemProperty -Path 'Registry::HKLM\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
	$newpath = "$oldpath;C:\Program Files\OpenSSH-Win64"
	Set-ItemProperty -Path "Registry::HKLM\System\CurrentControlSet\Control\Session Manager\Environment" -Name PATH -Value $newPath

	net start sshd
	Set-Service sshd -StartupType Automatic
	Set-Service ssh-agent -StartupType Automatic
	New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force

	#create authorized_keys file
	$sshConfDir="$HOME\.ssh"
	New-Item "$sshConfDir" -ItemType Directory -ea 0
	Get-Content -Path C:\sshkeys\id_*.pub -Raw | Set-Content "$sshConfDir\authorized_keys"
	Get-Content -Path C:\sshkeys\id_*.pub -Raw | Set-Content "C:\ProgramData\ssh\administrators_authorized_keys"
}

Function GetIPAddrFromNic() {
	param([System.Object]$Nic, [string]$Family = "IPv4")
	@(Get-NetIPAddress -AddressFamily $Family -InterfaceIndex $Nic.ifIndex)[0].IPAddress.Trim()
}

Function Generate-Env-File() {
	param([string]$envf = "C:\win.env")
	$content = "#windows env file
#VM_INT_IP=
#VM_EXT_IP=
#VM_EXT_IP6=

ADMINUSER=@ADMINUSER@
ADMINPASSWORD=@ADMINPASSWORD@
AD_DOMAIN_NETBIOS_NAME=@DOMAIN_NETBIOS_NAME@
AD_DOMAIN=@AD_DOMAIN@
AD_FQDN=@FQDN@

WIN_CIFS_SHARE1=cifstest
WIN_CIFS_SHARE2=cifssch
WIN_DFS_SHARE=dfsroot
WIN_DFS_SHARE1=dfsroot/local
WIN_DFS_SHARE2=dfsroot/remote
WIN_NFS_SHARE1=/nfstest
WIN_NFS_SHARE2=/nfssch"
	Set-Content -Value $utf8NoBOM.GetBytes($content) -Encoding Byte -Path $envf
}

$mypath = $MyInvocation.Mycommand.Path
$ansfDriveLetter = "$((Get-Item $mypath).PSDrive.Name):"

Out-Host "==> Start postinstall $mypath ..."
$LogDirName = "postinstall_logs"
$LogPath = "C:\$LogDirName"
New-Item "$LogPath" -ItemType Directory -ea 0

$RunOnceKey = "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce"

$Stage = $args[0]
if (!$Stage) { $Stage = "base" }

Out-Host "==> Start postinstall $Stage ..."

switch($Stage) {
	"base" {
		# activate windows with the product key
		# no need to activate: ??? 

		# turning off firewall
		Out-Host "`n==> turning off firewall"
		if (Get-Command Set-NetFirewallProfile -errorAction SilentlyContinue) {
			Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
		} else {
			netsh advfirewall set currentprofile state off
		}

		# enabling remote desktop
		Out-Host "`n==> enabling remote desktop"
		Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
		#Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
		#Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0

		# disabling IE ESC (Internet Explorer Enhanced Security Configuration)
		Out-Host "`n==> disabling IE ESC (Internet Explorer Enhanced Security Configuration)"
		$AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
		$UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
		Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0
		Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0
		Stop-Process -Name Explorer
		Out-Host "`n==> IE Enhanced Security Configuration (ESC) has been disabled."

		# disabling shutdown event tracker/shutdown dialog
		Out-Host "`n==> disabling shutdown event tracker/dialog"
		reg add "HKLM\SOFTWARE\Policies\Control\Microsoft\Windows NT\Reliability" /v ShutDownReasonOn /t REG_DWORD /d 0 /f
		reg add "HKLM\SOFTWARE\Policies\Control\Microsoft\Windows NT\Reliability" /v ShutDownReasonUI /t REG_DWORD /d 0 /f

		# adding hostname for the virtual host
		Out-Host "`n==> add host's hostname to $Env:WinDir\system32\drivers\etc\hosts"
		echo "" >> $Env:WinDir\system32\drivers\etc\hosts
		echo "@HOST_IP@ @VIRTHOST@" >> $Env:WinDir\system32\drivers\etc\hosts

		Out-Host "`n==> Start initialize extra disks ..."
		init-extra-disks
		$TestPath = "C:"
		$testDrvLetter = (Get-Volume -FileSystemLabel "test1").DriveLetter
		if ($testDrvLetter) { $TestPath = "${testDrvLetter}:" }
		$TestPath2 = ""
		$testDrvLetter2 = (Get-Volume -FileSystemLabel "test2").DriveLetter
		if ($testDrvLetter2) { $TestPath2 = "${testDrvLetter2}:" }

		# static ip setup
		Out-Host "`n==> static ip setup"
		$STATIC_IP_EXT = "@STATIC_IP_EXT@"
		$STATIC_IP_INT = "@STATIC_IP_INT@"
		$MAC_EXT = "@VNIC_MAC_EXT@"
		$MAC_INT = "@VNIC_MAC_INT@"

		#waiting NICs up ready
		$NicExt = Get-NetAdapter|Where-Object {$_.MacAddress -like $MAC_EXT.replace(":","?")}
		$NicInt = Get-NetAdapter|Where-Object {$_.MacAddress -like $MAC_INT.replace(":","?")}
		$NicRDMA = @(Get-NetAdapterRdma)[0]
		Out-Host "`n---> NIC ext info: ip($(GetIPAddrFromNic $NicExt)), desc: $($NicExt.ifDesc)"
		Out-Host "`n---> NIC int info: ip($(GetIPAddrFromNic $NicInt)), desc: $($NicInt.ifDesc)"
		if ($NicRDMA) {Out-Host "`n---> NIC int info: ip($(GetIPAddrFromNic $NicRDMA)), desc: $($NicRDMA.ifDesc)"}
echo "NIC-ext: $(GetIPAddrFromNic $NicExt) $(GetIPAddrFromNic $NicExt "IPv6") desc: $($NicExt.ifDesc)" | Set-Content -encoding utf8 $LogPath\@IPCONFIG_LOGF@
echo "NIC-int: $(GetIPAddrFromNic $NicInt) $(GetIPAddrFromNic $NicInt "IPv6") desc: $($NicInt.ifDesc)" | Add-Content -encoding utf8 $LogPath\@IPCONFIG_LOGF@

		if ($STATIC_IP_INT) {
			$oldIntAddrs = @(Get-NetIPAddress -AddressFamily IPv4 -InterfaceIndex $NicInt.InterfaceIndex)
			$IntIpConf = (Get-NetIPConfiguration -InterfaceIndex $NicInt.ifIndex)

			Out-Host "`n---> set static IP($STATIC_IP_INT) on int NIC: $($NicInt.ifAlias)"
			New-NetIPAddress -InterfaceIndex $NicInt.InterfaceIndex -AddressFamily IPv4 `
				-IPAddress $STATIC_IP_INT -PrefixLength $oldIntAddrs[0].PrefixLength `
				-DefaultGateway $IntIpConf.IPv4DefaultGateway[0].NextHop
		}

		# change address of EXT NIC from DHCP to STATIC
		$loop=1
		while (Get-Command Get-NetIPAddress -errorAction SilentlyContinue) {
			$oldExtAddrs = @(Get-NetIPAddress -AddressFamily IPv4 -InterfaceIndex $NicExt.InterfaceIndex)
			if ($null -ne $oldExtAddrs -and $null -ne $oldExtAddrs[0].IPAddress `
				-and $oldExtAddrs[0].IPAddress -is [string] -and $oldExtAddrs[0].IPAddress.Trim() -notlike "169.254.*") {
				break
			} else {
				Start-Sleep -s 5
				Out-Host "`n---> renew IP on ext NIC: $($NicExt.ifAlias)"
				ipconfig /release $NicExt.ifAlias
				ipconfig /renew $NicExt.ifAlias
			}
			$loop++
			if ($loop -le 32) {
				Out-Host "`n---> ERROR: can not get ip, please check the ext NIC configuration!"
				break
			}
		}
		$extStaticIp = $oldExtAddrs[0].IPAddress.Trim()
		$extIpConf = (Get-NetIPConfiguration -InterfaceIndex $NicExt.ifIndex)
		if ($STATIC_IP_EXT) {
			$extStaticIp=$STATIC_IP_EXT
		} else {
			Remove-NetIPAddress -IPAddress $extStaticIp -Confirm:$false
		}
		Out-Host "`n---> set static IP($extStaticIp) on ext NIC: $($NicExt.ifAlias)"
		New-NetIPAddress -InterfaceIndex $NicExt.InterfaceIndex -AddressFamily IPv4 `
			-IPAddress $extStaticIp -PrefixLength $oldExtAddrs[0].PrefixLength `
			-DefaultGateway $extIpConf.IPv4DefaultGateway[0].NextHop

		# disabling DNS registration on the network interface
		if ($NicInt) {
			Out-Host "`n==> disabling DNS registration on the network interface"
			$NicInt.SetDynamicDNSRegistration($false,$false)
		}

		# check if there is autorun script in anwser file
		$AutoRunFilePath = "$ansfDriveLetter\@AUTORUN_DIR@\autorun.ps1"
		if (Test-Path -Path $AutoRunFilePath) {
			Out-Host "`n==> exec autorun file"
			cd "$ansfDriveLetter\@AUTORUN_DIR@"
			powershell -ExecutionPolicy Bypass -File autorun.ps1
		}

		# Config NFS server
		Out-Host "`n==> Setup NFS Server"
		if (Get-Command Add-WindowsFeature -errorAction SilentlyContinue) {
			Add-WindowsFeature FS-NFS-Service
		}
		if (Get-Command Add-WindowsCapability -errorAction SilentlyContinue) {
			Set-ExecutionPolicy unrestricted
			Add-WindowsCapability -Online -Name FS-NFS-Service
		}
		Import-Module NFS
		$nfsPath = "$TestPath\nfstest"
		$nfsShareName = "nfstest"
		$nfsPath2 = "$TestPath\nfssch"
		if ($TestPath2) {$nfsPath2 = "$TestPath2\nfssch"}
		$nfsShareName2 = "nfssch"
		mkdir $nfsPath
		mkdir $nfsPath2
		New-NfsShare -Name $nfsShareName -Path $nfsPath -Authentication All -AllowRootAccess $True -Permission readwrite
		New-NfsShare -Name $nfsShareName2 -Path $nfsPath2 -Authentication All -AllowRootAccess $True -Permission readwrite
		Set-NfsShare -Name $nfsShareName -EnableUnmappedAccess $True
		Set-NfsShare -Name $nfsShareName2 -EnableUnmappedAccess $True
		nfsadmin server stop
		nfsadmin server start
		echo $null >> $nfsPath\file
		New-Item -ItemType SymbolicLink -Path "$nfsPath\link" -Target "$nfsPath\file"
		New-Item -ItemType SymbolicLink -Path "$nfsPath\link2" -Target "$nfsPath\file2"

		# Config CIFS server
		Out-Host "`n==> Setup CIFS Server"
		Enable-WindowsOptionalFeature -Online -FeatureName smb1protocol -NoRestart
		Set-SmbServerConfiguration -EnableSMB2Protocol $true -Force
		Import-Module SmbShare
		Import-Module SmbWitness
		$cifsPath = "$TestPath\cifstest"
		$cifsShareName = "cifstest"
		$cifsPath2 = "$TestPath\cifssch"
		if ($TestPath2) {$cifsPath2 = "$TestPath2\cifssch"}
		$cifsShareName2 = "cifssch"
		$cifsPath3 = "$TestPath\dfsroot"
		$cifsShareName3 = "dfsroot"
		mkdir $cifsPath
		mkdir $cifsPath2
		mkdir $cifsPath3
		New-SmbShare -Name $cifsShareName -Path $cifsPath -Description "for cifs share test 0_o"
		New-SmbShare -Name $cifsShareName2 -Path $cifsPath2 -Description "for cifs share test too 0_o"
		New-SmbShare -Name $cifsShareName3 -Path $cifsPath3 -Description "for cifs share test too 0_o"
		Grant-SmbShareAccess -Name $cifsShareName -AccountName "Everyone" -AccessRight Full -Force
		Grant-SmbShareAccess -Name $cifsShareName2 -AccountName "Everyone" -AccessRight Full -Force
		Grant-SmbShareAccess -Name $cifsShareName3 -AccountName "Everyone" -AccessRight Full -Force
		Install-WindowsFeature -Name FS-Resource-Manager -IncludeManagementTools
		New-FsrmQuota -Path $cifsPath -Description "limit usage to 10 GB." -Size 10GB
		New-FsrmQuota -Path $cifsPath2 -Description "limit usage to 10 GB." -Size 10GB
		Get-SmbShareAccess -Name $cifsShareName
		Get-SmbShareAccess -Name $cifsShareName2
		Get-SmbShareAccess -Name $cifsShareName3
		echo $null >> $cifsPath\file
		New-Item -ItemType SymbolicLink -Path "$cifsPath\link" -Target "$cifsPath\file"
		New-Item -ItemType SymbolicLink -Path "$cifsPath\link2" -Target "$cifsPath\file2"
		# for login without passwd from client
		net user guest /active:yes
		#reg add "HKLM\SYSTEM\CurrentControlSet\Control\Lsa" /v forceguest /t REG_DWORD /d 00000000 /f

		# Setup krb5 for NFS/CIFS
		$enablekdc = "@KDC_OPT@"
		if ($kdc -or $enablekdc) {
			# install DNS if has not been there
			if (!(Get-Command dnscmd -errorAction SilentlyContinue)) {
				Out-Host "`n--> Install WindowsFeature DNS"
				Install-WindowsFeature -Name DNS -IncludeManagementTools
			}

			Remove-WindowsFeature -Name AD-Certificate
			Install-windowsfeature -name AD-Domain-Services -IncludeManagementTools

			# Reboot to start Active Directory setup
			Out-Host "`n==> Reboot to start Active Directory setup"
			Set-ItemProperty $RunOnceKey "NextRun" "powershell $mypath startADSetup >> @POST_INSTALL_LOG@ 2>&1"
			shutdown -r -f -t 10 -c "Shutting down in 1 minute: Reboot to start Active Directory setup"
			exit
		}
	}

	"startADSetup" {
		Out-Host "`n==> Setup AD as Domain Controller"
		Import-Module ADDSDeployment
		$SafePasswd=(convertto-securestring "@ADMINPASSWORD@" -asplaintext -force)
		Install-ADDSForest `
		-DomainName @AD_DOMAIN@ `
		-SafeModeAdministratorPassword $SafePasswd `
		-CreateDNSDelegation:$false `
		-NoDNSOnNetwork:$true `
		-DomainMode @AD_DOMAIN_LEVEL@ `
		-DomainNetBIOSName @DOMAIN_NETBIOS_NAME@ `
		-ForestMode @AD_FOREST_LEVEL@ `
		-InstallDNS:$true `
		-NoRebootOnCompletion:$true `
		-Force

		# Reboot to complete Active Directory setup
		Out-Host "`n==> Reboot to complete Active Directory setup"
		Set-ItemProperty $RunOnceKey "NextRun" "powershell $mypath afterADSetup >> @POST_INSTALL_LOG@ 2>&1"
		shutdown -r -f -t 10 -c "Shutting down in 1 minute: Reboot to complete Active Directory setup"
		exit
	}
	"afterADSetup" {
		# do this just after AD has been set up
		Out-Host "`n==> reset dns ip"
		#$DNS_IPS=(Get-WmiObject "Win32_NetworkAdapterConfiguration where MACAddress='@VNIC_MAC_EXT@'").IPaddress
		$nicExt = Get-NetAdapter|Where-Object {$_.MacAddress -like "@VNIC_MAC_EXT@".replace(":","?")}
		dnscmd . /ResetListenAddresses $(GetIPAddrFromNic $nicExt)

		# Install Standalone Root CA
		Out-Host "`n==> Install Standalone Root CA"
		Import-Module ServerManager
		#Add-WindowsFeature Adcs-Cert-Authority -IncludeManagementTools
		#Install-AdcsCertificationAuthority -force -CAType EnterpriseRootCa
		#Install DFS feature
		Install-WindowsFeature -Name FS-DFS-Namespace,FS-DFS-Replication -IncludeManagementTools
		Import-Module ActiveDirectory
		Import-Module GroupPolicy

		# Reboot to complete Root CA Services setup
		Out-Host "`n==> Reboot to complete Root CA setup"
		Set-ItemProperty $RunOnceKey "NextRun" "powershell $mypath afterRootCASetup >> @POST_INSTALL_LOG@ 2>&1"
		shutdown -r -f -t 10 -c "Shutting down in 1 minute: Reboot to complete Root CA setup"
		exit
	}

	"afterRootCASetup" {
		# Time synchronization
		Out-Host "`n==> sync time"
		Sync-Time @TIME_SERVER@

		#setup dfs
		$cifsShareName = "cifstest"
		$cifsShareName3 = "dfsroot"
 		New-DfsnRoot -TargetPath "\\@GUEST_HOSTNAME@\$cifsShareName3" -Type DomainV2 -Path "\\@AD_DOMAIN@\dfsroot" -EnableSiteCosting:$true -EnableAccessBasedEnumeration:$True
		New-DfsnFolderTarget -Path "\\@AD_DOMAIN@\dfsroot\local" -TargetPath  "\\@GUEST_HOSTNAME@\$cifsShareName"
		New-DfsnFolderTarget -Path "\\@AD_DOMAIN@\dfsroot\remote" -TargetPath  "\\@HOST_NAME@\cifs"
		$dfstarget="@DFS_TARGET@"
		if ($dfstarget) {
			$dfsserv=$dfstarget.Split(":")[0]
			$dfsshare=$dfstarget.Split(":")[1]
			New-DfsnFolderTarget -Path "\\@AD_DOMAIN@\dfsroot\remote" -TargetPath  "\\$dfsserv\$dfsshare"
		}

		# Set krb5 encryption
		$GPOName = 'Default Domain Policy'
		# full supported kerberos encryption is 0x7fffffff
		Set-GPPrefRegistryValue -Name $GPOName -Action Update -Context Computer -Key 'HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System\kerberos\Parameters' -Type DWord -ValueName 'SupportedEncryptionTypes' -Value 0x7fffffff
		Set-ADUser testadmin -KerberosEncryptionType AES128,AES256,DES,RC4
		Set-ADAccountControl -Identity testadmin -DoesNotRequirePreAuth $true
		Set-ADUser "@ADMINUSER@" -KerberosEncryptionType AES128,AES256,DES,RC4
		#default timezone
		Set-TimeZone -Id "Eastern Standard Time" -PassThru

		# Add KDC
		Out-Host "`n==> Add KDC"
		ksetup.exe /AddKDC @DOMAIN_NETBIOS_NAME@ @FQDN@

		# Add krb5 principal
		setspn -A nfs/@GUEST_HOSTNAME@ @GUEST_HOSTNAME@
		setspn -A nfs/@FQDN@ @GUEST_HOSTNAME@
		setspn -A cifs/@GUEST_HOSTNAME@ @GUEST_HOSTNAME@
		setspn -A cifs/@FQDN@ @GUEST_HOSTNAME@

	}
}

# windows env file
Generate-Env-File

# installing openssh
$OpenSSHPath = "$ansfDriveLetter\OpenSSH.zip"
if (Test-Path -Path $OpenSSHPath) {
	Out-Host "`n==> install and start ssh server"
	Copy-Item -Path $ansfDriveLetter\sshkeys -Recurse -Destination 'C:\'
	Install-sshd -Path $OpenSSHPath
}

# check if there is autorun post script in anwser file
$AutoRunFilePath = "$ansfDriveLetter\@AUTORUN_DIR@\autorun-post.ps1"
if (Test-Path -Path $AutoRunFilePath) {
	Out-Host "`n==> exec autorun-post file"
	$opath = pwd
	cd "$ansfDriveLetter\@AUTORUN_DIR@"
	powershell -ExecutionPolicy Bypass -File autorun-post.ps1
	cd $opath
	Out-Host "`n==> autorun-post end"
}

# complete
Out-Host "`n==> save ipconfig info and generate install complete file !!!"
ipconfig | Add-Content -encoding utf8 $LogPath\@IPCONFIG_LOGF@
echo "install complete" | Set-Content -encoding utf8 $LogPath\@INSTALL_COMPLETE_FILE@
foreach ($dir in ("$ansfDriveLetter")) {
	if (Test-Path -Path $dir) {
		Copy-Item -Path @POST_INSTALL_LOG@ -Destination $LogPath
		Copy-Item -Path C:\win.env -Destination $LogPath
		Copy-Item -Path $LogPath -Recurse -Destination $dir\
	}
}

taskkill /F /IM explorer.exe
explorer
